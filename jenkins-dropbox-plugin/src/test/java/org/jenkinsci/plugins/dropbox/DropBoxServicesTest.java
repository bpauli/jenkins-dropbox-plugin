package org.jenkinsci.plugins.dropbox;

import static org.junit.Assert.*;

import java.awt.Desktop;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URISyntaxException;
import java.net.URL;

import javax.swing.JOptionPane;

import org.junit.Ignore;
import org.junit.Test;

import com.dropbox.client2.DropboxAPI;
import com.dropbox.client2.DropboxAPI.Account;
import com.dropbox.client2.ProgressListener;
import com.dropbox.client2.exception.DropboxException;
import com.dropbox.client2.session.AccessTokenPair;
import com.dropbox.client2.session.AppKeyPair;
import com.dropbox.client2.session.RequestTokenPair;
import com.dropbox.client2.session.Session.AccessType;
import com.dropbox.client2.session.WebAuthSession;
import com.dropbox.client2.session.WebAuthSession.WebAuthInfo;

public class DropBoxServicesTest {

	private static final String APP_KEY = "2yugtxbsz9h8tbs";
	private static final String APP_SECRET = "e1j5kek6cqbang2";
	// full access to dropbox, not only a single folder
	private static final AccessType ACCESS_TYPE = AccessType.DROPBOX;

	//token generated by generating url to authorization page
	private static final String KEY_TOKEN = "3pxpivhl7sut67h";
	private static final String SECRET_TOKEN = "niixg5ux89n16rr";
	
	private static final String DROPBOX_PATH_TO_FILE = "test/test.pak";

	private DropboxAPI<WebAuthSession> dropBoxApi;

	@Test
	public void test_authenticationwith_token() throws DropboxException,
			IOException, URISyntaxException {

		// already allowed
		AccessTokenPair tokens = new AccessTokenPair(KEY_TOKEN, SECRET_TOKEN);

		AppKeyPair appKeys = new AppKeyPair(APP_KEY, APP_SECRET);
		WebAuthSession session = new WebAuthSession(appKeys, ACCESS_TYPE, tokens);
		dropBoxApi = new DropboxAPI<WebAuthSession>(session);

		Account myAccount = dropBoxApi.accountInfo();
		System.out.println("myAccount.displayName: " + myAccount.displayName);

		File testFile = new File("src/test/resources/test.apk");
		assertNotNull(testFile);
		InputStream testFileInputStream = new FileInputStream(testFile);
		assertNotNull(testFileInputStream);

		dropBoxApi.putFileOverwrite(DROPBOX_PATH_TO_FILE, testFileInputStream, testFile.length(), new ProgressListener() {
			@Override
			public void onProgress(long bytes, long total) {
				System.out.println(bytes+" / "+total);
			}			
		});
	}

	@Test
	@Ignore("Must be launched only in order to generate the authorization token for test")
	public void test_authentication_without_token() throws DropboxException,
			IOException, URISyntaxException {

		AppKeyPair appKeys = new AppKeyPair(APP_KEY, APP_SECRET);
		WebAuthSession session = new WebAuthSession(appKeys, ACCESS_TYPE);

		WebAuthInfo authInfo = session.getAuthInfo();
		System.out.println("url=" + authInfo.url);

		RequestTokenPair pair = authInfo.requestTokenPair;
		String url = authInfo.url;

		Desktop.getDesktop().browse(new URL(url).toURI());
		JOptionPane.showMessageDialog(null,
				"Press ok to continue once you have authenticated.");
		session.retrieveWebAccessToken(pair);
		AccessTokenPair tokens = session.getAccessTokenPair();
		System.out.println("Use this token pair in future so you don't have to re-authenticate each time:");
		System.out.println("Key token: " + tokens.key);
		System.out.println("Secret token: " + tokens.secret);
		session.setAccessTokenPair(tokens);
		dropBoxApi = new DropboxAPI<WebAuthSession>(session);

		Account myAccount = dropBoxApi.accountInfo();
		System.out.println("myAccount.displayName: " + myAccount.displayName);
		long uid = dropBoxApi.accountInfo().uid;
		assertNotNull(uid);
		System.out.println(dropBoxApi.accountInfo().displayName);

	}
}
