package org.jenkinsci.plugins.dropbox;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;

import com.dropbox.client2.DropboxAPI;
import com.dropbox.client2.ProgressListener;
import com.dropbox.client2.exception.DropboxException;
import com.dropbox.client2.session.AccessTokenPair;
import com.dropbox.client2.session.AppKeyPair;
import com.dropbox.client2.session.Session.AccessType;
import com.dropbox.client2.session.WebAuthSession;

import hudson.FilePath;
import hudson.FilePath.FileCallable;
import hudson.model.BuildListener;
import hudson.remoting.VirtualChannel;

public class DropBoxServices {

	private static final String APP_KEY = "2yugtxbsz9h8tbs";
	private static final String APP_SECRET = "e1j5kek6cqbang2";
	// full access to dropbox, not only a single folder
	private static final AccessType ACCESS_TYPE = AccessType.DROPBOX;

	//token generated by generating url to authorization page
	private static final String KEY_TOKEN = "3pxpivhl7sut67h";
	private static final String SECRET_TOKEN = "niixg5ux89n16rr";
	
	private static final String DROPBOX_PATH_TO_FILE = "test/test.pak";

	private static DropboxAPI<WebAuthSession> dropBoxApi;

	public static boolean sendFile(FilePath filePath, final BuildListener listener) {

		try {
			filePath.act(new FileCallable<Void>() {
				
				private static final long serialVersionUID = -6880665254364827877L;

				public Void invoke(File f, VirtualChannel channel)
						throws IOException, InterruptedException {
					try {
						sendToDropBox(f, listener);
					} catch (DropboxException e) {
						e.printStackTrace();
					}
					return null;
				}

			});
		} catch (IOException e) {
			e.printStackTrace();
			return false;
		} catch (InterruptedException e) {
			e.printStackTrace();
			return false;
		}
		return true;
	}

	public static void authenticate() {
		AccessTokenPair tokens = new AccessTokenPair(KEY_TOKEN, SECRET_TOKEN);
		AppKeyPair appKeys = new AppKeyPair(APP_KEY, APP_SECRET);
		WebAuthSession session = new WebAuthSession(appKeys, ACCESS_TYPE, tokens);
		dropBoxApi = new DropboxAPI<WebAuthSession>(session);
	}

	public static void sendToDropBox(File fileToSend, final BuildListener listener) throws FileNotFoundException,
			DropboxException {

		authenticate();
		
		InputStream fileInputStream = new FileInputStream(fileToSend);

		dropBoxApi.putFileOverwrite(DROPBOX_PATH_TO_FILE, fileInputStream,
				fileToSend.length(), new ProgressListener() {
					@Override
					public void onProgress(long bytes, long total) {
						listener.getLogger().print(bytes + " / " + total+" - "+(bytes/total)*100 +"%");
					}
				});

	}

}